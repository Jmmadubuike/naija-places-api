{
  "version": 3,
  "sources": ["../../../node_modules/simple-notify/src/icons/close.svg", "../../../node_modules/simple-notify/src/icons/error.svg", "../../../node_modules/simple-notify/src/icons/info.svg", "../../../node_modules/simple-notify/src/icons/success.svg", "../../../node_modules/simple-notify/src/icons/warning.svg", "../../../node_modules/simple-notify/src/utils.ts", "../../../node_modules/simple-notify/src/consts.ts", "../../../node_modules/simple-notify/src/effects.ts", "../../../node_modules/simple-notify/src/index.ts"],
  "sourcesContent": ["<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m8.94 8 4.2-4.193a.67.67 0 0 0-.947-.947L8 7.06l-4.193-4.2a.67.67 0 1 0-.947.947L7.06 8l-4.2 4.193a.667.667 0 0 0 .217 1.093.666.666 0 0 0 .73-.146L8 8.94l4.193 4.2a.666.666 0 0 0 1.094-.217.665.665 0 0 0-.147-.73L8.94 8Z\" fill=\"currentColor\"/>\n</svg>\n", "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M16 2.667a13.333 13.333 0 1 0 0 26.666 13.333 13.333 0 0 0 0-26.666Zm0 24A10.667 10.667 0 0 1 5.333 16a10.56 10.56 0 0 1 2.254-6.533l14.946 14.946A10.56 10.56 0 0 1 16 26.667Zm8.413-4.134L9.467 7.587A10.56 10.56 0 0 1 16 5.333 10.667 10.667 0 0 1 26.667 16a10.56 10.56 0 0 1-2.254 6.533Z\" fill=\"currentColor\"/>\n</svg>\n", "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M16 14.667A1.333 1.333 0 0 0 14.667 16v5.333a1.333 1.333 0 0 0 2.666 0V16A1.333 1.333 0 0 0 16 14.667Zm.507-5.227a1.333 1.333 0 0 0-1.014 0 1.334 1.334 0 0 0-.44.28 1.56 1.56 0 0 0-.28.44c-.075.158-.11.332-.106.507a1.332 1.332 0 0 0 .386.946c.13.118.279.213.44.28a1.334 1.334 0 0 0 1.84-1.226 1.4 1.4 0 0 0-.386-.947 1.334 1.334 0 0 0-.44-.28ZM16 2.667a13.333 13.333 0 1 0 0 26.666 13.333 13.333 0 0 0 0-26.666Zm0 24a10.666 10.666 0 1 1 0-21.333 10.666 10.666 0 0 1 0 21.333Z\" fill=\"currentColor\"/>\n</svg>\n", "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m19.627 11.72-5.72 5.733-2.2-2.2a1.334 1.334 0 1 0-1.88 1.881l3.133 3.146a1.333 1.333 0 0 0 1.88 0l6.667-6.667a1.333 1.333 0 1 0-1.88-1.893ZM16 2.667a13.333 13.333 0 1 0 0 26.666 13.333 13.333 0 0 0 0-26.666Zm0 24a10.666 10.666 0 1 1 0-21.333 10.666 10.666 0 0 1 0 21.333Z\" fill=\"currentColor\"/>\n</svg>\n", "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M16.334 17.667a1.334 1.334 0 0 0 1.334-1.333v-5.333a1.333 1.333 0 0 0-2.665 0v5.333a1.333 1.333 0 0 0 1.33 1.333Zm-.508 5.227c.325.134.69.134 1.014 0 .165-.064.314-.159.44-.28a1.56 1.56 0 0 0 .28-.44c.076-.158.112-.332.107-.507a1.332 1.332 0 0 0-.387-.946 1.532 1.532 0 0 0-.44-.28 1.334 1.334 0 0 0-1.838 1.226 1.4 1.4 0 0 0 .385.947c.127.121.277.216.44.28Zm.508 6.773a13.333 13.333 0 1 0 0-26.667 13.333 13.333 0 0 0 0 26.667Zm0-24A10.667 10.667 0 1 1 16.54 27a10.667 10.667 0 0 1-.206-21.333Z\" fill=\"currentColor\"/>\n</svg>\n", "export const stringToHTML = (strHTML: string): HTMLElement => {\n  const parser = new DOMParser(),\n    content = 'text/html',\n    DOM = parser.parseFromString(strHTML, content)\n\n  return DOM.body.childNodes[0] as HTMLElement\n}\n\nexport const getSvgNode = (svg: string) => {\n  const doc = new DOMParser().parseFromString(svg, 'application/xml')\n  const node = document.importNode(doc.documentElement, true)\n  return node.outerHTML\n}\n", "import SvgClose from './icons/close.svg'\nimport SvgError from './icons/error.svg'\nimport SvgInfo from './icons/info.svg'\nimport SvgSuccess from './icons/success.svg'\nimport SvgWarning from './icons/warning.svg'\nimport { getSvgNode } from './utils'\n\nexport const CLASSNAMES = {\n  CONTAINER: 'sn-notifications-container',\n  NOTIFY: 'sn-notify',\n  NOTIFY_CONTENT: 'sn-notify-content',\n  NOTIFY_ICON: 'sn-notify-icon',\n  NOTIFY_CLOSE: 'sn-notify-close',\n  NOTIFY_TITLE: 'sn-notify-title',\n  NOTIFY_TEXT: 'sn-notify-text',\n  IS_X_CENTER: 'sn-is-x-center',\n  IS_Y_CENTER: 'sn-is-y-center',\n  IS_CENTER: 'sn-is-center',\n  IS_LEFT: 'sn-is-left',\n  IS_RIGHT: 'sn-is-right',\n  IS_TOP: 'sn-is-top',\n  IS_BOTTOM: 'sn-is-bottom',\n  NOTIFY_OUTLINE: 'sn-notify-outline',\n  NOTIFY_FILLED: 'sn-notify-filled',\n  NOTIFY_ERROR: 'sn-notify-error',\n  NOTIFY_WARNING: 'sn-notify-warning',\n  NOTIFY_SUCCESS: 'sn-notify-success',\n  NOTIFY_INFO: 'sn-notify-info',\n  NOTIFY_FADE: 'sn-notify-fade',\n  NOTIFY_FADE_IN: 'sn-notify-fade-in',\n  NOTIFY_SLIDE: 'sn-notify-slide',\n  NOTIFY_SLIDE_IN: 'sn-notify-slide-in',\n  NOTIFY_AUTOCLOSE: 'sn-notify-autoclose'\n} as const\n\nexport const NOTIFY_STATUS_ENUMS = {\n  ERROR: 'error',\n  WARNING: 'warning',\n  SUCCESS: 'success',\n  INFO: 'info'\n} as const\n\nexport const NOTIFY_TYPE_ENUMS = {\n  OUTLINE: 'outline',\n  FILLED: 'filled'\n} as const\n\nexport const NOTIFY_ANIMATION_ENUMS = {\n  FADE: 'fade',\n  SLIDE: 'slide'\n} as const\n\nexport const ICONS = {\n  CLOSE: getSvgNode(SvgClose),\n  SUCCESS: getSvgNode(SvgSuccess),\n  ERROR: getSvgNode(SvgError),\n  WARNING: getSvgNode(SvgWarning),\n  INFO: getSvgNode(SvgInfo)\n}\n", "import { CLASSNAMES } from './consts'\nimport type Notify from './index'\n\nexport const fadeIn = (self: Notify): void => {\n  self.wrapper.classList.add(CLASSNAMES.NOTIFY_FADE)\n  setTimeout(() => {\n    self.wrapper.classList.add(CLASSNAMES.NOTIFY_FADE_IN)\n  }, 100)\n}\n\nexport const fadeOut = (self: Notify): void => {\n  self.wrapper.classList.remove(CLASSNAMES.NOTIFY_FADE_IN)\n  setTimeout(() => {\n    self.wrapper.remove()\n  }, self.speed)\n}\n\nexport const slideIn = (self: Notify): void => {\n  self.wrapper.classList.add(CLASSNAMES.NOTIFY_SLIDE)\n  setTimeout(() => {\n    self.wrapper.classList.add(CLASSNAMES.NOTIFY_SLIDE_IN)\n  }, 100)\n}\nexport const slideOut = (self: Notify): void => {\n  self.wrapper.classList.remove(CLASSNAMES.NOTIFY_SLIDE_IN)\n  setTimeout(() => {\n    self.wrapper.remove()\n  }, self.speed)\n}\n", "import { CLASSNAMES, ICONS, NOTIFY_ANIMATION_ENUMS, NOTIFY_STATUS_ENUMS, NOTIFY_TYPE_ENUMS } from './consts'\nimport { fadeIn, fadeOut, slideIn, slideOut } from './effects'\nimport './style.css'\nimport type { IArgs, NotifyEffect, NotifyPosition, NotifyStatus, NotifyType } from './types'\nimport { stringToHTML } from './utils'\n\nexport default class Notify {\n  wrapper: HTMLElement\n  customWrapper: string\n  container: HTMLElement\n  status: NotifyStatus\n  type: NotifyType\n  effect: NotifyEffect\n  position: NotifyPosition\n  title: string\n  text: string\n  showIcon: boolean\n  customIcon: string\n  showCloseButton: boolean\n  customClass: string\n  speed: number\n  autoclose: boolean\n  autotimeout: number\n  notificationsGap: number\n  notificationsPadding: number\n  selectedNotifyInEffect: (self: Notify) => void\n  selectedNotifyOutEffect: (self: Notify) => void\n\n  constructor(args: IArgs) {\n    const {\n      notificationsGap = 20,\n      notificationsPadding = 20,\n      status = 'success',\n      effect = NOTIFY_ANIMATION_ENUMS.FADE,\n      type = 'outline',\n      title,\n      text,\n      showIcon = true,\n      customIcon = '',\n      customClass = '',\n      speed = 500,\n      showCloseButton = true,\n      autoclose = true,\n      autotimeout = 3000,\n      position = 'right top',\n      customWrapper = ''\n    } = args\n\n    this.customWrapper = customWrapper\n    this.status = status\n    this.title = title\n    this.text = text\n    this.showIcon = showIcon\n    this.customIcon = customIcon\n    this.customClass = customClass\n    this.speed = speed\n    this.effect = effect\n    this.showCloseButton = showCloseButton\n    this.autoclose = autoclose\n    this.autotimeout = autotimeout\n    this.notificationsGap = notificationsGap\n    this.notificationsPadding = notificationsPadding\n    this.type = type\n    this.position = position\n\n    if (!this.checkRequirements()) {\n      console.error(\"You must specify 'title' or 'text' at least.\")\n      return\n    }\n\n    // set outer container for all Notify's\n    this.setContainer()\n\n    // set wrapper for each Notify\n    this.setWrapper()\n\n    this.setPosition()\n\n    // set icon in the left\n    if (this.showIcon) this.setIcon()\n\n    // set close button\n    if (this.showCloseButton) this.setCloseButton()\n\n    // set title, text\n    this.setContent()\n\n    // add the Notify to our container\n    this.container.prepend(this.wrapper)\n\n    // init effect\n    this.setEffect()\n    this.notifyIn(this.selectedNotifyInEffect)\n\n    // init autoclose\n    if (this.autoclose) this.autoClose()\n\n    // check whether Notify is visible\n    this.setObserver()\n  }\n\n  private checkRequirements(): boolean {\n    return !!(this.title || this.text)\n  }\n\n  private setContainer(): void {\n    const container: HTMLElement = document.querySelector(`.${CLASSNAMES.CONTAINER}`)\n    if (container) {\n      this.container = container\n    } else {\n      this.container = document.createElement('div')\n      this.container.classList.add(CLASSNAMES.CONTAINER)\n      document.body.appendChild(this.container)\n    }\n\n    if (this.notificationsPadding) {\n      this.container.style.setProperty('--sn-notifications-padding', `${this.notificationsPadding}px`)\n    }\n\n    if (this.notificationsGap) {\n      this.container.style.setProperty('--sn-notifications-gap', `${this.notificationsGap}px`)\n    }\n  }\n\n  private setPosition(): void {\n    this.container.classList[this.position === 'center' ? 'add' : 'remove'](CLASSNAMES.IS_CENTER)\n    this.container.classList[this.position.includes('left') ? 'add' : 'remove'](CLASSNAMES.IS_LEFT)\n    this.container.classList[this.position.includes('right') ? 'add' : 'remove'](CLASSNAMES.IS_RIGHT)\n    this.container.classList[this.position.includes('top') ? 'add' : 'remove'](CLASSNAMES.IS_TOP)\n    this.container.classList[this.position.includes('bottom') ? 'add' : 'remove'](CLASSNAMES.IS_BOTTOM)\n    this.container.classList[this.position.includes('x-center') ? 'add' : 'remove'](CLASSNAMES.IS_X_CENTER)\n    this.container.classList[this.position.includes('y-center') ? 'add' : 'remove'](CLASSNAMES.IS_Y_CENTER)\n  }\n\n  private setCloseButton(): void {\n    const closeWrapper = document.createElement('div')\n    closeWrapper.classList.add(CLASSNAMES.NOTIFY_CLOSE)\n    closeWrapper.innerHTML = ICONS.CLOSE\n    this.wrapper.appendChild(closeWrapper)\n\n    closeWrapper.addEventListener('click', () => {\n      this.close()\n    })\n  }\n\n  private setWrapper(): void {\n    if (this.customWrapper) {\n      this.wrapper = stringToHTML(this.customWrapper)\n    } else {\n      this.wrapper = document.createElement('div')\n    }\n    this.wrapper.style.setProperty('--sn-notify-transition-duration', `${this.speed}ms`)\n\n    // set classes\n    this.wrapper.classList.add(CLASSNAMES.NOTIFY)\n\n    switch (this.type) {\n      case NOTIFY_TYPE_ENUMS.OUTLINE:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_OUTLINE)\n        break\n      case NOTIFY_TYPE_ENUMS.FILLED:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_FILLED)\n        break\n      default:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_OUTLINE)\n    }\n\n    switch (this.status) {\n      case NOTIFY_STATUS_ENUMS.SUCCESS:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_SUCCESS)\n        break\n      case NOTIFY_STATUS_ENUMS.ERROR:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_ERROR)\n        break\n      case NOTIFY_STATUS_ENUMS.WARNING:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_WARNING)\n        break\n      case NOTIFY_STATUS_ENUMS.INFO:\n        this.wrapper.classList.add(CLASSNAMES.NOTIFY_INFO)\n        break\n    }\n\n    if (this.autoclose) {\n      this.wrapper.classList.add(CLASSNAMES.NOTIFY_AUTOCLOSE)\n      this.wrapper.style.setProperty('--sn-notify-autoclose-timeout', `${this.autotimeout + this.speed}ms`)\n    }\n\n    if (this.customClass) {\n      const classes = this.customClass.split(' ')\n      classes.forEach((className) => {\n        this.wrapper.classList.add(className)\n      })\n    }\n  }\n\n  private setContent(): void {\n    const contentWrapper = document.createElement('div')\n    contentWrapper.classList.add(CLASSNAMES.NOTIFY_CONTENT)\n\n    let titleElement, textElement\n\n    if (this.title) {\n      titleElement = document.createElement('div')\n      titleElement.classList.add(CLASSNAMES.NOTIFY_TITLE)\n      titleElement.textContent = this.title.trim()\n      if (!this.showCloseButton) titleElement.style.paddingRight = '0'\n    }\n\n    if (this.text) {\n      textElement = document.createElement('div')\n      textElement.classList.add(CLASSNAMES.NOTIFY_TEXT)\n      textElement.innerHTML = this.text.trim()\n      if (!this.title) textElement.style.marginTop = '0'\n    }\n\n    this.wrapper.appendChild(contentWrapper)\n    if (this.title) contentWrapper.appendChild(titleElement)\n    if (this.text) contentWrapper.appendChild(textElement)\n  }\n\n  private setIcon(): void {\n    const computedIcon = (status: NotifyStatus) => {\n      switch (status) {\n        case NOTIFY_STATUS_ENUMS.SUCCESS:\n          return ICONS.SUCCESS\n        case NOTIFY_STATUS_ENUMS.ERROR:\n          return ICONS.ERROR\n        case NOTIFY_STATUS_ENUMS.WARNING:\n          return ICONS.WARNING\n        case NOTIFY_STATUS_ENUMS.INFO:\n          return ICONS.INFO\n      }\n    }\n\n    const iconWrapper = document.createElement('div')\n    iconWrapper.classList.add(CLASSNAMES.NOTIFY_ICON)\n    iconWrapper.innerHTML = this.customIcon || computedIcon(this.status)\n    if (this.status || this.customIcon) this.wrapper.appendChild(iconWrapper)\n  }\n\n  private setObserver(): void {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (!(entries[0].intersectionRatio <= 0)) {\n          return\n        } else {\n          this.close()\n        }\n      },\n      {\n        threshold: 0\n      }\n    )\n\n    setTimeout(() => {\n      observer.observe(this.wrapper)\n    }, this.speed)\n  }\n\n  private notifyIn(callback: (p: Notify) => void): void {\n    callback(this)\n  }\n\n  private notifyOut = (callback: (p: Notify) => void): void => {\n    callback(this)\n  }\n\n  private autoClose(): void {\n    setTimeout(() => {\n      this.close()\n    }, this.autotimeout + this.speed)\n  }\n\n  public close(): void {\n    this.notifyOut(this.selectedNotifyOutEffect)\n  }\n\n  private setEffect(): void {\n    switch (this.effect) {\n      case NOTIFY_ANIMATION_ENUMS.FADE:\n        this.selectedNotifyInEffect = fadeIn\n        this.selectedNotifyOutEffect = fadeOut\n        break\n      case NOTIFY_ANIMATION_ENUMS.SLIDE:\n        this.selectedNotifyInEffect = slideIn\n        this.selectedNotifyOutEffect = slideOut\n        break\n      default:\n        this.selectedNotifyInEffect = fadeIn\n        this.selectedNotifyOutEffect = fadeOut\n    }\n  }\n}\n\n;(globalThis as any).Notify = Notify\n"],
  "mappings": "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",
  "names": ["t", "e", "s", "i", "o", "a", "r", "c", "l", "h", "d", "u", "f", "p", "v", "N", "O", "T", "E", "m", "w"]
}
